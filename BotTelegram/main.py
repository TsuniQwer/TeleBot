from telebot import types
import telebot
import config
import random
import pyowm


import schedule
from threading import Thread
from time import sleep

import requests
from bs4 import BeautifulSoup

from datetime import datetime  # date
import bus
import timetable


# -------------------------------------------------------------

owm = pyowm.OWM("f71c23329ecc0fff8824830092b7b9a8")

current_datetime = datetime.now()

bot = telebot.TeleBot(config.API_KEY)

sity = ["–ü—É—à–∫–∏–Ω–æ", "–ú–æ—Å–∫–≤–∞", "–ö–∞–∑–∞–Ω—å", "–°–æ—á–∏","–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥","–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥","–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥",
        "–Ø—Ä–æ—Å–ª–∞–≤–ª—å", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ê–Ω–∞–ø–∞", "–í–ª–∞–¥–∏–º–∏—Ä", "–¢—É–ª–∞", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–í–æ—Ä–æ–Ω–µ–∂",
        "–°—É–∑–¥–∞–ª—å", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö–æ—Å—Ç—Ä–æ–º–∞","–°–∞–º–∞—Ä–∞","–í–æ–ª–≥–æ–≥—Ä–∞–¥","–ì–µ–ª–µ–Ω–¥–∂–∏–∫","–¢–≤–µ—Ä—å","–°–∞—Ä–∞—Ç–æ–≤",
        "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ü—Å–∫–æ–≤", "–í—ã–±–æ—Ä–≥", "–ü–µ—Ä–µ—Å–ª–∞–≤–ª—å-–ó–∞–ª–µ—Å—Å–∫–∏–π", "–†—è–∑–∞–Ω—å",
        "–ö–æ–ª–æ–º–Ω–∞","–°–µ—Ä–≥–∏–µ–≤ –ü–æ—Å–∞–¥", "–£—Ñ–∞", "–ö–∏—Å–ª–æ–≤–æ–¥—Å–∫", "–†–æ—Å—Ç–æ–≤-–ù–∞-–î–æ–Ω—É", "–°–º–æ–ª–µ–Ω—Å–∫", "–ß–µ–ª—è–±–∏–Ω—Å–∫",
        "–ü—è—Ç–∏–≥–æ—Ä—Å–∫", "–ò–≤–∞–Ω–æ–≤–æ","–ö–∞–ª—É–≥–∞", "–ü–µ—Ä–º—å", "–¢—é–º–µ–Ω—å", "–û–º—Å–∫", "–ô–æ—à–∫–∞—Ä-–û–ª–∞", "–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫",
        "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–£–≥–ª–∏—á", "–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫", "–í–æ–ª–æ–≥–¥–∞", "–ú—É—Ä–æ–º", "–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å", "–†–æ—Å—Ç–æ–≤ –í–µ–ª–∏–∫–∏–π",
        "–ü–ª—ë—Å", "–ü–ª–µ—Å", "–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥", "–ß–µ–±–æ–∫—Å–∞—Ä—ã", "–ò–≤–∞–Ω—Ç–µ–µ–≤–∫–∞", "–ö–ª—è–∑—å–º–∞", "–¢–∞—Ä–∞—Å–æ–≤–∫–∞", "–ß–µ—Ä–∫–∏–∑–æ–≤–æ",
        "–ó–∞–≤–µ—Ç—ã –ò–ª—å–∏—á–∞", "–ö–æ—Ä–æ–ª—ë–≤", "–ú—ã—Ç–∏—â–∏", "–©—ë–ª–∫–æ–≤–æ", "–§—Ä—è–∑–∏–Ω–æ","USA", "–•–∞—Ç–∞–Ω–≥–∞", "–¢—É—Ä–∞",
        "–ò—Ä–∫—É—Ç—Å–∫", "–ù–æ—Ä–∏–ª—å—Å–∫", "–ö—Ä—ã–º"]


# ----------------------------------------------------------------


commands = "/ras - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ;\n/usd, /eur  - –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∏ –µ–≤—Ä–æ\n/cripta - –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ \n/weather - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É;\n/bus - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤ 509, 29;\n/roll - —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100; \n /flip, /coin - –∫–∏–Ω—É—Ç—å –º–æ–Ω–µ—Ç–∫—É"


@bot.message_handler(commands=['start'])
def welcome(message):
    sti = open('img/sticker.webp', 'rb')
    bot.send_sticker(message.chat.id, sti)

    # main buttons
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üé≤ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    item2 = types.KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞")
    item3 = types.KeyboardButton("üìâ –í–∞–ª—é—Ç–∞/–∫—Ä–∏–ø—Ç–∞")
    item4 = types.KeyboardButton("üìÉ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã")

    markup.add(item1, item2, item3, item4)  # put items

    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–º –¢—Å—É–Ω–∏ –ö–≤–µ—Ä–æ–º. (–í—Å–µ –∫–æ–º–∞–Ω–¥—ã - '/help', –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ - '/start')\n\nüë®üèª‚Äçüíª–°–æ–∑–¥–∞—Ç–µ–ª—å @tsuniqwer".format(message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type == 'private':
            
        for i in sity:
            if message.text == i:
                sity2 = i
                mgr = owm.weather_manager()
                observation = mgr.weather_at_place(sity2)
                w = observation.weather

                # Temperature
                MidleTemperature = w.temperature('celsius')['temp']

                wind = w.wind()['speed']
                clouds = w.clouds
                status = w.detailed_status

                bot.send_message(message.chat.id,sity2 +":")
                bot.send_message(message.chat.id, "üå§–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + str(MidleTemperature) + "¬∞," + " \nüí®–í–µ—Ç–µ—Ä: " + str(wind) + "–º/c, \nüå´ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: " + str(clouds) + "%")

                if status == 'light rain':
                    bot.send_message(
                        message.chat.id, "–°–µ–π—á–∞—Å –∏–¥–µ—Ç –º–∞–ª–µ–Ω—å–∫–∏–π –¥–æ–∂–¥—å üåß")
                elif status == 'rain':
                    bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –∏–¥–µ—Ç –¥–æ–∂–¥—å üåß")
                elif status == 'overcast clouds':
                    bot.send_message(message.chat.id, "–ü–∞—Å–º—É—Ä–Ω–æ üåß")
                elif status == 'moderate rain':
                    bot.send_message(message.chat.id, "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å üåß")
                return
               

        # –†–ê–°–ü–ò–°–ê–ù–ò–ï
        if message.text == 'üé≤ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            #monthUser = current_datetime.strftime("%A")
            #bot.send_message(message.chat.id,monthUser)
            urlDay = 'https://www.google.com/search?q=day+of+week+today&oq=day+of+week+today&aqs=chrome..69i57j0i22i30l9.699j0j7&sourceid=chrome&ie=UTF-8'       
            headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1'}

            r = requests.get(urlDay, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            dayNow = soup.find('div', class_='vk_bk dDoNo FzvWSb XcVN5d').text


            if str(dayNow) == "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":
                dayOfweek = "Monday"
            elif str(dayNow) == "–≤—Ç–æ—Ä–Ω–∏–∫":
                dayOfweek = "Tuesday"
            elif str(dayNow) == "—Å—Ä–µ–¥–∞":
                dayOfweek = "Wednesday"
            elif str(dayNow) == "—á–µ—Ç–≤–µ—Ä–≥":
                dayOfweek = "Thursday"
            elif str(dayNow) == "–ø—è—Ç–Ω–∏—Ü–∞":
                dayOfweek = "Friday"
            elif str(dayNow) == "—Å—É–±–±–æ—Ç–∞":
             dayOfweek = "Saturday"
            elif str(dayNow) == "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
                dayOfweek = "Sunday"
            bot.send_message(message.chat.id,dayOfweek)
            bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: \n(/ras - –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.)")
            for day in timetable.all:

                if dayOfweek== "Monday":
                    bot.send_photo(message.chat.id, timetable.Monday) #–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                    break
                elif dayOfweek == "Tuesday":
                    bot.send_photo(message.chat.id, timetable.Tuesday) #–≤—Ç–æ—Ä–Ω–∏–∫
                    break
                elif dayOfweek == "Wednesday":
                    bot.send_photo(message.chat.id, timetable.Wednesday) #—Å—Ä–µ–¥–∞
                    break
                elif dayOfweek== "Thursday":
                    bot.send_photo(message.chat.id, timetable.Thursday) #—á–µ—Ç–≤–µ—Ä–≥
                    break
                elif dayOfweek == "Friday":
                    bot.send_message(message.chat.id, "C–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç! ü•≥")
                    bot.send_photo(message.chat.id, timetable.Friday) #–ø—è—Ç–Ω–∏—Ü–∞
                    break
                elif dayOfweek == "Saturday":
                    bot.send_photo(message.chat.id, timetable.Saturday) #—Å—É–±–±–æ—Ç–∞
                    break
                elif dayOfweek == "Sunday":
                    bot.send_message(message.chat.id, "C–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç! ü•≥")
                    bot.send_photo(message.chat.id, timetable.Sunday) #–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    break
                
        elif message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            ph1 = open('img/photo1.jpg', 'rb')
            bot.send_photo(message.chat.id, ph1)
        elif message.text == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            ph1 = open('img/photo1.jpg', 'rb')
            bot.send_photo(message.chat.id, ph1)
        elif message.text == '/ras':
            ph1 = open('img/photo1.jpg', 'rb')
            bot.send_photo(message.chat.id, ph1)

        elif message.text == '–ü—Ä–∏–≤–µ—Ç':
            sti = open('img/sticker2.webp', 'rb')
            bot.send_sticker(message.chat.id, sti)
            bot.send_message(message.chat.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–º–Ω—é. –ù–∞–ø–∏—à–∏ /help.")

        elif message.text == '–ø—Ä–∏–≤–µ—Ç':
            sti = open('img/sticker2.webp', 'rb')
            bot.send_sticker(message.chat.id, sti)
            bot.send_message(message.chat.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–º–Ω—é. –ù–∞–ø–∏—à–∏ /help.")

        # -------------------------------------------------------------------------------------------------------
        # BUS
        elif message.text == "/bus":
            urlTime = 'https://tochnoe-moskovskoe-vremya.ru/'       
            headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1'}

            r = requests.get(urlTime, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            hour = soup.find('div', class_='dclock').text 

            hourNow = int(hour[:3])
    
            bot.send_message(message.chat.id, "üöå –ê–≤—Ç–æ–±—É—Å—ã –≤ —à–∞—Ä–∞–≥—É: ")
            for i in bus.busOutPushkino:
                if i == hourNow:
                    bot.send_message(message.chat.id, bus.busOutPushkino[i])
                else:
                    continue

            bot.send_message(message.chat.id, "üöå –ê–≤—Ç–æ–±—É—Å—ã –¥–æ–º–æ–π: ")
            for i in bus.busInPushkino:
                if i == hourNow:
                    bot.send_message(message.chat.id, bus.busInPushkino[i])
                else:
                    continue

        # –í–ê–õ–Æ–¢–ê

        elif message.text == '/usd':
            urlUsd = 'https://www.banki.ru/products/currency/usd/'       
            headers = {
                'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1'}

            r = requests.get(urlUsd, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            usd = soup.find('div', class_='currency-table__large-text').text

            # eur
            urlEur = 'https://www.banki.ru/products/currency/eur/'       
            r = requests.get(urlEur, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            eur = soup.find('div', class_='currency-table__large-text').text

            gif1 = open('gif/gif4.mp4', 'rb')
            bot.send_video(message.chat.id, gif1, None)
            bot.send_message(message.chat.id, "usd: " +
                             str(usd) + "\t eur: " + str(eur))
        elif message.text == '/eur':
            urlUsd = 'https://www.banki.ru/products/currency/usd/'       
            headers = {
                'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1'}

            r = requests.get(urlUsd, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            usd = soup.find('div', class_='currency-table__large-text').text

            # eur
            urlEur = 'https://www.banki.ru/products/currency/eur/'       
            r = requests.get(urlEur, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            eur = soup.find('div', class_='currency-table__large-text').text
            gif1 = open('gif/gif4.mp4', 'rb')
            bot.send_video(message.chat.id, gif1, None)
            bot.send_message(message.chat.id, "usd: " +
                             str(usd) + "\t eur: " + str(eur))

        elif message.text == '/cripta':
            urlUsd = 'https://www.banki.ru/products/currency/usd/'       
            headers = {
                'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1'}
            # bitcoin
            urlbitcoin = 'https://coinmarketcap.com/ru/currencies/bitcoin/markets/'
            r = requests.get(urlbitcoin, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            bitcoin = soup.find('div', class_='priceValue smallerPrice').text

            # Ethereum

            urlEthereum = 'https://coinmarketcap.com/ru/currencies/ethereum/'
            r = requests.get(urlEthereum, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            ethereum = soup.find('div', class_='priceValue smallerPrice').text

            # Cardano

            urlCardano = 'https://coinmarketcap.com/ru/currencies/cardano/'
            r = requests.get(urlCardano, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            cardano = soup.find('div', class_='priceValue').text

            # Binance Coin

            urlBinanceCoin = 'https://coinmarketcap.com/ru/currencies/binance-coin/'
            r = requests.get(urlBinanceCoin, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            BinanceCoin = soup.find('div', class_='priceValue').text

            # Tether

            urlTether = 'https://coinmarketcap.com/ru/currencies/tether/'
            r = requests.get(urlTether, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            Tether = soup.find('div', class_='priceValue').text

            # XRP

            urlXRP = 'https://coinmarketcap.com/ru/currencies/xrp/'
            r = requests.get(urlXRP, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            xrp = soup.find('div', class_='priceValue').text

            # Solana

            urlSolana = 'https://coinmarketcap.com/ru/currencies/solana/'
            r = requests.get(urlSolana, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            Solana = soup.find('div', class_='priceValue').text

            # Dogecoin

            urlDogecoin = 'https://coinmarketcap.com/ru/currencies/dogecoin/'
            r = requests.get(urlDogecoin, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            Dogecoin = soup.find('div', class_='priceValue').text

            # Polkadot

            urlPolkadot = 'https://coinmarketcap.com/ru/currencies/polkadot-new/'
            r = requests.get(urlPolkadot, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            Polkadot = soup.find('div', class_='priceValue').text

            # USDCoin

            urlUSDCoin = 'https://coinmarketcap.com/ru/currencies/usd-coin/'
            r = requests.get(urlUSDCoin, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            USDCoin = soup.find('div', class_='priceValue').text

            gif1 = open('gif/gif3.mp4', 'rb')
            bot.send_video(message.chat.id, gif1, None)
            bot.send_message(message.chat.id, "Bitcoin: " + str(bitcoin) + "\nEthereum: " + str(ethereum) + "\nCardano: " + str(cardano) + "\nBinanceCoin: " + str(BinanceCoin) +
                             "\nTether: " + str(Tether) + "\nXRP: " + str(xrp) + "\nSolana: " + str(Solana) + "\nDogecoin: " + str(Dogecoin) + "\nPolkadot: " + str(Polkadot) + "\nUSDCoin: " + str(USDCoin))

        # –í–∞–ª—é—Ç–∞/–∫—Ä–∏–ø—Ç–∞ –∫–Ω–æ–ø–∫–∞:

        elif message.text == 'üìâ –í–∞–ª—é—Ç–∞/–∫—Ä–∏–ø—Ç–∞':
            urlUsd = 'https://www.banki.ru/products/currency/usd/'       
            headers = {
                'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1'}

            r = requests.get(urlUsd, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            usd = soup.find('div', class_='currency-table__large-text').text

            # eur
            urlEur = 'https://www.banki.ru/products/currency/eur/'       
            r = requests.get(urlEur, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            eur = soup.find('div', class_='currency-table__large-text').text

            # bitcoin
            urlbitcoin = 'https://coinmarketcap.com/ru/currencies/bitcoin/markets/'
            r = requests.get(urlbitcoin, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            bitcoin = soup.find('div', class_='priceValue smallerPrice').text

            # Ethereum

            urlEthereum = 'https://coinmarketcap.com/ru/currencies/ethereum/'
            r = requests.get(urlEthereum, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            ethereum = soup.find('div', class_='priceValue smallerPrice').text

            # Cardano

            urlCardano = 'https://coinmarketcap.com/ru/currencies/cardano/'
            r = requests.get(urlCardano, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            cardano = soup.find('div', class_='priceValue').text

            # Binance Coin

            urlBinanceCoin = 'https://coinmarketcap.com/ru/currencies/binance-coin/'
            r = requests.get(urlBinanceCoin, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            BinanceCoin = soup.find('div', class_='priceValue').text

            # Tether

            urlTether = 'https://coinmarketcap.com/ru/currencies/tether/'
            r = requests.get(urlTether, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            Tether = soup.find('div', class_='priceValue').text

            # XRP

            urlXRP = 'https://coinmarketcap.com/ru/currencies/xrp/'
            r = requests.get(urlXRP, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            xrp = soup.find('div', class_='priceValue').text

            # Solana

            urlSolana = 'https://coinmarketcap.com/ru/currencies/solana/'
            r = requests.get(urlSolana, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            Solana = soup.find('div', class_='priceValue').text

            # Dogecoin
            urlDogecoin = 'https://coinmarketcap.com/ru/currencies/dogecoin/'
            r = requests.get(urlDogecoin, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            Dogecoin = soup.find('div', class_='priceValue').text

            # Polkadot

            urlPolkadot = 'https://coinmarketcap.com/ru/currencies/polkadot-new/'
            r = requests.get(urlPolkadot, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            Polkadot = soup.find('div', class_='priceValue').text

            # USDCoin

            urlUSDCoin = 'https://coinmarketcap.com/ru/currencies/usd-coin/'
            r = requests.get(urlUSDCoin, headers=headers)
            soup = BeautifulSoup(r.content, 'html.parser')

            USDCoin = soup.find('div', class_='priceValue').text

            # -------------------------------------------------------------------------------------------------------

            bot.send_message(message.chat.id, "usd: " +
                             str(usd) + "\t eur: " + str(eur))
            bot.send_message(message.chat.id, "Bitcoin: " + str(bitcoin) + "\nEthereum: " + str(ethereum) + "\nCardano: " + str(cardano) + "\nBinanceCoin: " + str(BinanceCoin) +
                             "\nTether: " + str(Tether) + "\nXRP: " + str(xrp) + "\nSolana: " + str(Solana) + "\nDogecoin: " + str(Dogecoin) + "\nPolkadot: " + str(Polkadot) + "\nUSDCoin: " + str(USDCoin))

        # /HELP
        elif message.text == 'üìÉ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã':
            bot.send_message(message.chat.id, commands)
        elif message.text == '/help':
            bot.send_message(message.chat.id, commands)

        # –†–û–õ–õ
        elif message.text == '/roll':
            gif2 = open('gif/gif2.mp4', 'rb')
            bot.send_video(message.chat.id, gif2, None)
            sleep(1)
            bot.send_message(message.chat.id, str(random.randint(0, 100)))

        # –§–õ–ò–ü
        elif message.text == '/coin':

            gif1 = open('gif/gif.mp4', 'rb')
            bot.send_video(message.chat.id, gif1, None)
            flip = str(random.randint(0, 1))
            sleep(1)
            if flip == "1":
                bot.send_message(message.chat.id, "–û—Ä–µ–ª ü™ô")
                gif1.close()
            else:
                bot.send_message(message.chat.id, "–†–µ—à–∫–∞ ü™ô")
                gif1.close()

        elif message.text == '/flip':
            gif1 = open('gif/gif.mp4', 'rb')
            bot.send_video(message.chat.id, gif1, None)
            flip = str(random.randint(0, 1))
            sleep(1)
            if flip == "1":
                bot.send_message(message.chat.id, "–û—Ä–µ–ª ü™ô")
                gif1.close()
            else:
                bot.send_message(message.chat.id, "–†–µ—à–∫–∞ ü™ô")
                gif1.close()

        # –ü–û–ì–û–î–ê
        elif message.text == 'üå§ –ü–æ–≥–æ–¥–∞':

            markup = types.InlineKeyboardMarkup(row_width=3)
            item1 = types.InlineKeyboardButton(
                "–ú–æ—Å–∫–≤–∞üåà", callback_data='moscow')
            item2 = types.InlineKeyboardButton(
                "–ü—É—à–∫–∏–Ω–æüóΩ", callback_data='pushkino')
            item3 = types.InlineKeyboardButton(
                "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥üì°", callback_data='other')
            item4 = types.InlineKeyboardButton(
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µüîî", callback_data='notification')
            ph2 = open('img/photo2.jpg', 'rb')
            bot.send_photo(message.chat.id, ph2)

            markup.add(item1, item2, item3, item4)

            bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥?',
                             reply_markup=markup)

        elif message.text == '/weather':
            markup = types.InlineKeyboardMarkup(row_width=3)
            item1 = types.InlineKeyboardButton(
                "–ú–æ—Å–∫–≤–∞üåà", callback_data='moscow')
            item2 = types.InlineKeyboardButton(
                "–ü—É—à–∫–∏–Ω–æüóΩ", callback_data='pushkino')
            item3 = types.InlineKeyboardButton(
                "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥üì°", callback_data='other')
            item4 = types.InlineKeyboardButton(
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µüîî", callback_data='notification')
            ph2 = open('img/photo2.jpg', 'rb')
            bot.send_photo(message.chat.id, ph2)

            markup.add(item1, item2, item3, item4)

            bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥?',reply_markup=markup)
     

        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢')
            sti = open('img/sticker4.webp', 'rb')
            bot.send_sticker(message.chat.id, sti)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):

    try:
        if call.message:
            if call.data == 'moscow':
                sity = "–ú–æ—Å–∫–≤–∞"
                mgr = owm.weather_manager()
                observation = mgr.weather_at_place(sity)
                w = observation.weather

                # Temperature
                MidleTemperature = w.temperature('celsius')['temp']

                wind = w.wind()['speed']
                rain = w.rain
                clouds = w.clouds
                status = w.detailed_status

                bot.send_message(call.message.chat.id, "üå§–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + str(MidleTemperature) +
                                 "¬∞," + " \nüí®–í–µ—Ç–µ—Ä: " + str(wind) + "–º/c, \nüå´ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: " + str(clouds) + "%")

                if status == 'light rain':
                    bot.send_message(call.message.chat.id,
                                     "–°–µ–π—á–∞—Å –∏–¥–µ—Ç –º–∞–ª–µ–Ω—å–∫–∏–π –¥–æ–∂–¥—å üåß")
                elif status == 'rain':
                    bot.send_message(call.message.chat.id,
                                     "–°–µ–π—á–∞—Å –∏–¥–µ—Ç –¥–æ–∂–¥—å üåß")
                elif status == 'overcast clouds':
                    bot.send_message(call.message.chat.id, "–ü–∞—Å–º—É—Ä–Ω–æ üåß")
                elif status == 'moderate rain':
                    bot.send_message(call.message.chat.id, "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å üåß")

            elif call.data == 'pushkino':
                sity = "–ü—É—à–∫–∏–Ω–æ"
                mgr = owm.weather_manager()
                observation = mgr.weather_at_place(sity)
                w = observation.weather

                # Temperature
                MidleTemperature = w.temperature('celsius')['temp']

                wind = w.wind()['speed']
                rain = w.rain
                clouds = w.clouds
                status = w.detailed_status

                bot.send_message(call.message.chat.id, "üå§–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + str(MidleTemperature) +
                                 "¬∞," + " \nüí®–í–µ—Ç–µ—Ä: " + str(wind) + "–º/c, \nüå´ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: " + str(clouds) + "%")

                if status == 'light rain':
                    bot.send_message(call.message.chat.id,
                                     "–°–µ–π—á–∞—Å –∏–¥–µ—Ç –º–∞–ª–µ–Ω—å–∫–∏–π –¥–æ–∂–¥—å üåß")
                elif status == 'rain':
                    bot.send_message(call.message.chat.id,
                                     "–°–µ–π—á–∞—Å –∏–¥–µ—Ç –¥–æ–∂–¥—å üåß")
                elif status == 'overcast clouds':
                    bot.send_message(call.message.chat.id, "–ü–∞—Å–º—É—Ä–Ω–æ üåß")
                elif status == 'moderate rain':
                    bot.send_message(call.message.chat.id, "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å üåß")

            elif call.data == 'other':
                bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ üëáüèª")

            elif call.data == 'notification':


                config.checker = 1 + config.checker
                if config.checker % 2 == 0:
                    bot.send_message(call.message.chat.id,
                                     '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ –≤–∫–ª—é—á–µ–Ω–æ ‚úÖ')

                    def schedule_checker():
                        while True:
                            schedule.run_pending()
                            sleep(1)

                    def function_to_run():
                        sity = "–ú–æ—Å–∫–≤–∞"
                        mgr = owm.weather_manager()
                        observation = mgr.weather_at_place(sity)
                        w = observation.weather

                        # Temperature
                        MidleTemperature = w.temperature('celsius')['temp']

                        wind = w.wind()['speed']
                        clouds = w.clouds

                        return bot.send_message(call.message.chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µüîî\n\nüå§–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + str(MidleTemperature) + "¬∞," + " \nüí®–í–µ—Ç–µ—Ä: " + str(wind) + "–º/c, \nüå´ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: " + str(clouds) + "%")

                    if __name__ == "__main__":
                        schedule.every().day.at("12:00").do(function_to_run)
                        
                        Thread(target=schedule_checker).start()
                else:
                    bot.send_message(call.message.chat.id,
                                     '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ –≤—ã–ª—é—á–µ–Ω–æ ‚ùå')
                    schedule.clear()

            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="",
                                  reply_markup=None)

            # show alert
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                      text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!!11")

    except Exception as e:
        print(repr(e))


# RUN
bot.polling(none_stop=True)
